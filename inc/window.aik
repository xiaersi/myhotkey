;; 设置窗口是否总是置顶，并可设置透明度
;; var_title,var_text 为窗口标题
;; bool_top 窗口是否置顶
;#include ./inc/string.aik
;#include ./inc/tip.aik

SetWin_Top_Transparent(var_title,var_text,bool_top=true,var_Transparent=0,var_Transparent2=0)
{
	ifwinexist %var_title%,%varPrompt%
	{
		WinGet, varGetTransparent,Transparent,%var_title%,%varPrompt%

		if bool_top
			winset,AlwaysOnTop, ON
		if(var_Transparent=0) ;为0时窗口活动时不透明，非活动时半透明
		{
		ifwinactive %var_title%,%varPrompt%
		  {
			WinSet, Transparent,off
		  }
		else
		  {
			WinSet, Transparent,100
		  }
		}
		else   ;var_Transparent!=0，即设置窗口透明度为此值
		{
			ifwinactive  %var_title%,%varPrompt%	;窗口活动时设置透明度为var_Transparent
			  {
			    if not(varGetTransparent=var_Transparent)
				WinSet, Transparent,%var_Transparent%
			  }
			else 	; var_Transparent2 和var_Transparent都不为0时
			{
			  if (var_Transparent2=0)  ; 
				{
				   if not(varGetTransparent=var_Transparent)
					WinSet, Transparent,%var_Transparent%
				}
				else		;非活动时透明度为var_Transparent2
				{
				   if not(varGetTransparent=var_Transparent2)
					WinSet, Transparent,%var_Transparent2%
				}
			}
		}
	}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 实现鼠标移动到指定窗口，该窗口会自动变换透明度
SetWin_Top_autoTransparent(var_title,var_text,bool_top=true,var_Transparent1=240,var_Transparent2=200,var_Transparent3=180,var_Transparent4=80)
{

	ifwinexist %var_title%,%var_text%
	{
	WinGetPos var_x,var_y,var_width,var_height ,%var_title%,%var_text%
CoordMode, mouse, Screen  
		MouseGetPos, mouseVarX, mouseVarY
		if(mouseVarX>var_x and mouseVarX<var_x+var_width and mousevary > var_y+50 and mousevary<var_y+var_height)
			SetWin_Top_Transparent(var_title,var_text,bool_top,var_Transparent1,var_Transparent2)
		else
			SetWin_Top_Transparent(var_title,var_text,bool_top,var_Transparent3,var_Transparent4)
CoordMode, mouse, Relative  
	}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   移动活动窗口
moveactivewindow(var_dx,var_dy)
{
	keywait,a,D L T0.3
	WinGetActiveStats,title_ActiveWindow,var_width,var_height,var_x,var_y
	var_x:=var_x + var_dx
	var_y:=var_y + var_dy
	winmove,%title_ActiveWindow%,,%var_x%,%var_y%
	return
}


; The following function centers the specified window on the screen:

CenterWindow(WinTitle="A")
{
    WinGetPos,,, Width, Height, %WinTitle%
    WinMove, %WinTitle%,, (A_ScreenWidth/2)-(Width/2), (A_ScreenHeight/2)-(Height/2)
}

CenterActiveWindow()
{
	WinGetActiveTitle WinTitle
	WinGetPos,,, Width, Height, %WinTitle%
	WinMove, %WinTitle%,, (A_ScreenWidth/2)-(Width/2), (A_ScreenHeight/2)-(Height/2)
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 更改当前窗口的大小
ResetActiveWindowRect(newwidth,newheight)
{
;msgbox ResetActiveWindowRect( %newwidth%, %newheight% )
	WinRestore, A
	WinGetActiveStats,title_ActiveWindow,var_width,var_height,var_x,var_y
	sleep 100
	winmove,%title_ActiveWindow%,,%var_x%,%var_y%,%newwidth%,%newheight%
	return
}

;;------窗口最大化最小化-------------------------------
IsWinMax( WinTitle = "A", WinText = "" )
{
	WinGet, OutputVar , MinMax, %WinTitle%, %WinText%
	if OutputVar = 1
		return true
	else
		return false
}

IsWinMin( WinTitle = "A", WinText = "" )
{
	WinGet, OutputVar , MinMax, %WinTitle%, %WinText%
	if OutputVar = -1
		return true
	else
		return false
}

IsWinTopMost(  WinTitle = "A", WinText = ""  )
{
	WinGet, ExStyle, ExStyle, %WinTitle%, %WinText%
	if (ExStyle & 0x8)  ; 0x8 is WS_EX_TOPMOST.
		return true
	return false
}

GetWinAlpha(   WinTitle = "A", WinText = ""   )
{
	WinGet, var_alpha, Transparent, %WinTitle%, %WinText%
	if var_alpha =
		var_alpha = 255
	return var_alpha
}

∑最大化窗口( WinTitle = "A", WinText = "" )
{
	WinMaximize , %WinTitle%, %WinText%
}

∑最小化窗口( WinTitle = "A", WinText = "" )
{
	WinMinimize , %WinTitle%, %WinText%
}

∑还原窗口( WinTitle = "A", WinText = "" )
{
	WinRestore , %WinTitle%, %WinText%
}

∑最大化或还原窗口( WinTitle = "A", WinText = "" )
{
	WinGet, OutputVar , MinMax, %WinTitle%, %WinText%
	if OutputVar = 0
		WinMaximize , %WinTitle%, %WinText%
	else
		WinRestore , %WinTitle%, %WinText%
}

∑设置窗口置顶( WinTitle = "A", WinText = "" )
{
	WinSet, AlwaysOnTop, on, %WinTitle%, %WinText%
	tipx(20,"窗口已置顶")
}

∑取消窗口置顶( WinTitle = "A", WinText = "" )
{
	WinSet, AlwaysOnTop, off, %WinTitle%, %WinText%
	tipx(20,"取消窗口置顶")
}

∑设置鼠标下窗口置顶( )
{
	MouseGetPos, , , UMWID
	WinSet, AlwaysOnTop, on, ahk_id %UMWID%
	tipx(20,"窗口已置顶")
}

∑取消鼠标下窗口置顶( )
{
	MouseGetPos, , , UMWID
	WinSet, AlwaysOnTop, off, ahk_id %UMWID%
	tipx(20,"取消窗口置顶")
}

∑关闭窗口( WinTitle = "A", WinText = "", isAsk = false )
{
	if not isAsk
	{
		winclose , %WinTitle%, %WinText%
		return
	}
	if WinTitle = A
		WinGetActiveTitle, TitleTip
	else
		TitleTip := WinTitle

	msgbox 4, 关闭指定窗口, 当前窗口标题：【%TitleTip%】`n`n确定要关闭它吗？
	ifmsgbox yes
		winclose %WinTitle%, %WinText%
	return
		
}


∑调整窗口大小( newwidth, newheight, WinTitle="A", WinText="")
{
;	msgbox ∑调整窗口大小( %newwidth%, %newheight%, %WinTitle%, %WinText% )
	
	WinRestore, %WinTitle%, %WinText%
;	PostMessage, 0x112, 0xF120,,,  %WinTitle%, %WinText%
	WinGetPos , var_x, var_y, var_width, var_height, %WinTitle%, %WinText%

	if newwidth =
	{
		newwidth := var_width
	}

	if newheight =
	{
		newheight := var_height
	}

	if ( newwidth == var_width && newheigth == var_height )
	{
		return
	}

	winmove, %WinTitle%, %WinText%, %var_x%, %var_y%, %newwidth%, %newheight%
	return
}


;; 窗口是否资源管理器
IsExploreWindow( WinClass_="A" )
{
	if WinClass_ =
		WinGetClass WinClass_, A
	else if WinClass_ = A
		WinGetClass WinClass_, A

	if ( WinClass_ ="CabinetWClass" or WinClass_="ExploreWClass" or WinClass_="Progman")
		return true

	return false
}

