/**
*@file 		Array.aik
*@author	teshorse
*@date 		2011.02.22
*@brief		数组操作相关函数
注意：
	在AutoHotkey中，数组的概念与其他语言不一样，甚至不能称之为数组，
	实际上是将带有顺序编号的一组变量名，视为数组而已，如
	var0, var1, var2, ... , varn
	而var1等本身就是一个单独的变量，可以与其他变量一样单独赋值。
	将这一组变量视为数组之后，一般约定var0存储后面元素个数之和，即数组大小。
*/
ClearArray( ArrayName )
{
	Local loops
	loops := %ArrayName%0
	loop %loops%
	{
		%ArrayName%%a_index% =
	}
	%ArrayName%0 := 0
}

;; 在数组ArrayName中查找_searchText并返回所在序号，返回0表示没有查找到。bEqual指定查找方式是否完全匹配
;; bEqual为true时，只有完全相等才返回；false时，返回第一个包含了_searchText的数组元素
SearchArray( ArrayName, _searchText, bEqual = false )
{
	Local loops, var_temp
	if %ArrayName%0 =
		return 0
		
	if _searchText =
		return 0
		
	loops := %ArrayName%0
	loop %loops%
	{
		var_temp := %ArrayName%%a_index%
		if ( bEqual && var_temp == _searchText )
		{
			return a_index
		}
		else IfInString var_temp, %_searchText%
		{
			return a_index
		}
	}
	return 0
}

;; 在数组ArrayName中查找并删除_searchText，返回false表示没有查找到，true表示查找并删除成功。
;; bEqual为true时，只有完全相等才返回；false时，返回第一个包含了_searchText的数组元素
RemoveArray( ArrayName, _searchText, bEqual = false )
{
	Local loops, var_temp, var_index, j, k, bFind, loops2
	if %ArrayName%0 =
		return false
		
	if _searchText =
		return false
		
	loops := %ArrayName%0
	bFind := false
	loop %loops%
	{
		var_index := loops - a_index + 1
		var_temp := %ArrayName%%var_index%
		if ( bEqual && var_temp == _searchText )
		{
			loops2 := loops - var_index
			loop %loops2%
			{
				j := var_index + a_index -1
				k := j + 1
				%ArrayName%%j% := %ArrayName%%k%
			}
			%ArrayName%%loops% =
			%ArrayName%0--
			bFind := true
		}
		else IfInString var_temp, %_searchText%
		{
			loops2 := loops - var_index
			loop %loops2%
			{
				j := var_index + a_index -1
				k := j + 1
				%ArrayName%%j% := %ArrayName%%k%
			}
			%ArrayName%%loops% =
			%ArrayName%0--
			bFind := true
		}
	}
	return bFind
}

;; 在数据末尾增加一个元素
AppendArray( ArrayName, _text )
{
	Local count
	if ArrayName =
	{
		count := 0
	}
	else
	{
		count := %ArrayName%0
	}
	count ++
	%ArrayName%0 := count
	%ArrayName%%count% := _text
}

∑数组排序( ArrayIn, ArrayOut )
{
	local loops, loop2, idx, idx2, idx1, min, max, half, var_temp, var_temp2
    local inspos                     ;; inspos 插入位置
	if %ArrayIn%0 <= 0
		return false

	;; 清空ArrayOut
	ClearArray( ArrayOut )

	Loops := %ArrayIn%0
	
	loop %Loops%
	{
		idx := a_index
		var_temp := %ArrayIn%%idx%
		if var_temp =
			continue
		loop2 := %ArrayOut%0
		inspos := -1
		if loop2 <= 0
		{
			inspos := 1
		}
		else
		{
			;; 折半查找法查找插入位置
			min := 1
			max := loop2
			half =

			loop 
			{
				if ( min > max )
				{
					if half > 0
						inspos := half

					break
				}
				
				half := ( min + max ) // 2
				idx2 := %ArrayOut%%half%
				if ( idx2 == idx  )
				{
					inspos := half
					break
				}
				var_temp2 := %ArrayIn%%idx2%
				if ( var_temp == var_temp2 )
				{
					inspos := half
					break					
				}
				else if ( var_temp > var_temp2 )
				{
					min := half + 1
				}
				else 
				{
					max := half - 1
				}
			}
		}

		if inspos > 0
		{
			%ArrayOut%0++
			idx2 := %ArrayOut%0
			loop
			{
				if idx2 < 2
					break
				if idx2 <= inspos
					break
				idx1 := idx2 -1
				%ArrayOut%%idx2% := %ArrayOut%%idx1%
				idx2--
			}
			%ArrayOut%%inspos% := idx
		}
	}	
	;; 读取ArrayOut保存的ArrayIn序号，读取相应的值再赋值给ArrayOut
	loops := %ArrayOut%0
	loop %loops%
	{
		idx := %ArrayOut%%a_index%
		%ArrayOut%%a_index% := %ArrayIn%%idx%
	}
	return true
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 以下函数为在数组中搜索并排序使用
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 在 ArrayIn 中搜索 SearchText并排序，并将结果以数组ArrayOut和ArrayIndex返回
;; ArrayOut 返回搜索到的值
;; ArrayIndex 与ArrayOut对应，但存储的是ArrayOut的值在ArrayIn中的序号
;; 为了排序，内部使用了一个辅助数组 %ArrayOut%_Weight_， 记得用ClearArray_Weight()释放内存
∑数组搜索排序( ArrayIn, ArrayOut, ArrayIndex, SearchText )
{
	local loops,  idx,  var_temp,  var_instr
    local inspos                     ;; inspos 插入位置
	if %ArrayIn%0 <= 0
		return false

	if SearchText =
		return false

	;; 清空ArrayOut
	ClearArrayWithIndex( ArrayOut )
	ClearArray( ArrayIndex )

;	listvars 
;	msgbox ∑数组搜索排序( %ArrayIn%, %ArrayOut%, %ArrayIndex%, %SearchText% )

	Loops := %ArrayIn%0
	loop %Loops%
	{
		idx := a_index
		var_temp := %ArrayIn%%idx%
		if var_temp =
			continue
		var_instr := instr( var_temp, SearchText )
		if var_instr = 0
		{
			continue 				;; 不符合搜索条件的记录过滤掉	
		}
		InsertSortArrayWidthIndex( ArrayOut, var_temp, var_instr, ArrayIndex, idx )
	}		
	;; 数组搜索排序已经处理完毕，清理调整InsertSortArrayWidthIndex()时所产生的临时数组
	ClearArray_Weight( ArrayOut )
	return true
}

ClearArrayWithIndex( ArrayName )
{
	Local loops
	loops := %ArrayName%0
	loop %loops%
	{
		%ArrayName%%a_index% =
		%ArrayName%_Weight_%a_index% =
	}
	%ArrayName%0 := 0
	%ArrayName%_Weight_0 := 0
}

ClearArray_Weight( ArrayName )
{
	Local loops
	loops := %ArrayName%_Weight_0
	loop %loops%
	{
		%ArrayName%_Weight_%a_index% =
	}
	%ArrayName%_Weight_0 := 0
}

;; 向指定数据ArrayName中，插入_Value，并以参数_Weight作为排序依据
;; 返回插入位置：0 表示插入失败;
;; 注意：本函数使用了临时数组%ArrayName%_Weight_，用于辅助排序
;; 需要外部某个地方调用ClearArray_Weight()释放这个数组的内存
InsertSortArrayWidthIndex( ArrayName, _Value,  _Weight,  ArrayIndex, _Memo )
{
	Local  idx, var_temp, var_buf, min, max, half, idxpos, loops
	if _Weight = 0
	{
		msgbox InsertSortArrayWidthIndex( ) 的 _Weight = [%_Weight%] 有误!
		return 0
	}

	if %ArrayName%0 =
		%ArrayName%0 := 0

	loops := %ArrayName%0
	if loops = 0 			;; 数组是空的, 则直接插入数据	
	{
		%ArrayName%0++
		idx := %ArrayName%0
		%ArrayName%%idx% := _Value
		%ArrayName%_Weight_%idx% := _Weight
		%ArrayIndex%%idx% := _Memo
		return true
	}
	else if loops < 0 	;; 数组有误
	{
		msgbox InsertSortArrayWidthIndex( %ArrayName%, %_Value%, %_Weight% ) 数组数量有误!
		return 0
	}
	;; else if loops > 0 	;; 以下是正常情况下计算插入位置并插入数据

	
	min := 1
	max := loops
	idxpos := 0

	;; 首先根据_Weight权重值，采用折半查找法寻找序列数据 %ArrayName%_Weight_ , 
	;; 定位到值为 _Weight 的某个位置, 并将位置保存到变量 idxpos 中。
	;; 注意：这时只能大概的定位，后面还需要根据Value的值精确定位
	loop %loops%
	{
		if ( min > max )
		{
			break
		}
		half := ( min + max ) // 2
		var_temp := %ArrayName%_Weight_%half%
		if var_temp =
		{
			msgbox 出错： InsertSortArrayWidthIndex() 中 %ArrayName%_Weight_%half% 值为空 
			return	
		}
		
		if ( var_temp == _Weight )
		{
			idxpos := half
			break
		}
		else if ( _Weight > var_temp )
		{
			min := half + 1
		}
		else
		{
			max := half - 1
		}
	}
	
	;; idxpos 调整位置, 使其精确定位
	if idxpos = 0				;; 如果在现有的数组中，没有找到序号, 则寻找最近的插入点
	{
		if ( half <= 0 || half > loops )
			return 0
		var_temp := %ArrayName%_Weight_%half%

		if ( _Weight >= var_temp )
			idxpos := half + 1
		else 
			idxpos := half
	}
	else if idxpos > 0		;;  已经找到了粗略位置，根据_Value值进一步定位到精确位置
	{
		var_temp := %ArrayName%_Weight_%idxpos%
		if ( _Weight <> var_temp )
		{
			msgbox 查找出的位置有误 _Weight[%_Weight%] <> var_temp[%var_temp%]
			return 0
		}
		var_buf := %ArrayName%%idxpos%
		if ( _Value > var_buf )			;; 冒泡法向右移动
		{
			idx := idxpos
			loop 
			{
				idx++
				if ( idx > loops )
					break

				var_temp := %ArrayName%_Weight_%idx%
				if ( _Weight <> var_temp )
				{
					idxpos := idx
					break
				}
				var_buf := %ArrayName%%idx%
				if ( var_buf > _Value )
				{
					idxpos := idx
					break
				}
				else
				{
					idxpos := idx -1
				}
			}
		}
		else if ( _Value <= var_buf )		;; 冒泡法向左移动
		{
			idx := idxpos
			loop
			{
				idx--
				if idx <= 0
					break

				var_temp  := %ArrayName%_Weight_%idx%

				if ( _Weight <> var_temp )
				{
					idxpos := idx + 1
					break
				}
				var_buf := %ArrayName%%idx%
				if ( var_buf <= _Value )
				{
					idxpos := idx + 1
					break
				}
				else
				{
					idxpos := idx
				}
			}
		}
	}

	if ( idxpos <= 0 )
	{
		msgbox 出错： InsertSortArrayWidthIndex() 中 %ArrayName%_Weight_%half% 值为空 
		return 0
	}
	
	;; 已经查找到精确的插入位置，插入数据
	%ArrayName%0++
	loops := %ArrayName%0
	loop %loops%
	{
		idx := loops - a_index + 1
		if ( idx <= idxpos || idx <= 1 )
			break
		var_temp := idx -1
		%ArrayName%%idx% := %ArrayName%%var_temp%
		%ArrayIndex%%idx% := %ArrayIndex%%var_temp%
		%ArrayName%_Weight_%idx% := %ArrayName%_Weight_%var_temp%		
	}
	%ArrayName%%idxpos% := _Value
	%ArrayIndex%%idxpos% := _Memo
	%ArrayName%_Weight_%idxpos% := _Weight	
	%ArrayName%_Weight_0 := %ArrayName%0
	%ArrayIndex%0 := %ArrayName%0
	return idxpos
}
