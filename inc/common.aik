; common.aik 定义最基本的函数
; 作者: 陈建平

g_isInstall_autohotkey =  ;	是否安装过了AutoHotkey

∑是否安装了AutoHotkey()
{
	global g_isInstall_autohotkey
	if g_isInstall_autohotkey =
	{
		var_RootKey = HKEY_LOCAL_MACHINE
		var_SubKey = SOFTWARE\AutoHotkey
		regread var_read, %var_RootKey%, %var_SubKey%, InstallDir
		if var_read <>
			g_isInstall_autohotkey := true
		else
			g_isInstall_autohotkey := false
	}
	return g_isInstall_autohotkey
}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;---剪贴板有关的函数--------------------------------------------------------
cliptext( varDefault = "", bWait=true )
{
	ClipboardOld := ClipboardAll
	Clipboard := varDefault
	send ^c
	if not bWait
		return

	clipwait , 0, 1
	sleep 100
	varClip=%Clipboard%
	Clipboard := ClipboardOld  ; Restore previous contents of clipboard.
	return varClip
}


/** @brief	选择光标左边的一个空白字符
* 当你想激活一个HotString时，必须在上一单词结束后，再输入Hotkey才能生效
* 通常用空格作为上一单词的结束，而有的时候这个空格是多余的，
* 本函数的目的就是选中这个多余的空格，方便用户可以立即替换之。
* 应用示例：
* 现有热键“;c”用于激活汉字输入法，假设现在我想输入字符串“is安装了AutoHotkey()”
* 在输入"is"之后需要输入";c"切换中文输入法，如果我直接输"is;c"是不会激活";c"热键的，
* 因为系统认为“is;c”是一个完整的单词。因此需要输入"is ;c",才能使";c"热键生效。
* 然而这就多了一个空格。为了清除这个多余的空格，可以在 ";c"内部先调用本函数，
* 如此一来，在激活“is;c”时将会选中这个多余的空格，然后切换到中文输入法。
* 此时直接输入汉字将会这个多余的空格覆盖，从而不必为了删除这个空格多按一下退格键。
*/
SelectLeftSpaceChar()
{
	autotrim off
	ClipboardOld := Clipboard
	Clipboard = $error$
	send {shift down}{left}{shift up}
	send ^c
	clipwait

	if Clipboard = $error$
	{
		Clipboard := ClipboardOld
		return			;; 如果没有选中内容，则返回
	}
	ifInString clipboard, `n
	{
        send {down}                     ;; 如果选中的是回车符号，那么向下退回原位
	}
	else if Clipboard is not space
	{
        send {right}                    ;; 如果选中了一个非空白字符，则向右退回原位
	}
	Clipboard := ClipboardOld
	autotrim on
}

;;借助剪贴板来输出非英文字符 flag= 0无格式粘贴 1转换为大写后粘贴 2小写粘贴 3首字母大写
Sendbyclip(var_string, flag=0)
{
	ClipboardOld = %ClipboardAll%
	if flag = 1
		StringUpper Clipboard, var_string
	else if flag = 2
		StringLower Clipboard, var_string
	else if flag = 3
		StringUpper Clipboard, var_string, T
	else 
		Clipboard =%var_string%
	sleep 100
	send ^v
	sleep 100
	Clipboard = %ClipboardOld%  ; Restore previous contents of clipboard.
}

;;---选中一行----------------------------------------------------------------
SelectLine()
{
	send {home}{shift down}{end}{shift up}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
pleasewait(var_title="",var_text="",var_time=0)
{
	loop
	{
		if (var_time=0)
		  InputBox, var_time, 设置等待时间,你要暂停多久？请输入时间,,300,120,,,,,3000
		if (var_time<500)
		  return
		if (var_title="")
		{
		  sleep %var_time%
		}
		else
		{
		  winwait %var_title%,%var_text%,%var_time%
		}
		var_time=0
	}
}

;; send 一个变量的值
cout(var_out)
{
   sendinput %var_out%
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;---InputBox相关函数--------------------------------------------------------
YesNoBox( var_title, var_text )
{
	MsgBox, 4,ini文件存在重复的key, %var_text%
	IfMsgBox Yes
	{
		return true
	}
	return false
}

MyInput(vartitle,varPrompt,varDefault="", varWidth=260, varHeight=120)
{
	Sleep 200
	var_user := ""
	if varWidth <=0 or varHeight <= 0
	{
		inputbox,var_user,%vartitle%,%varPrompt%,,,, , , , ,%varDefault%
	}
	else
	{
		inputbox,var_user,%vartitle%,%varPrompt%,,%varWidth%,%varHeight%, , , , ,%varDefault%
	}
	if ErrorLevel
		var_user =
	return var_user
}
;; 与MyInput不同之处在于, 会将光标定位在最后位置
MyInput2(vartitle,varPrompt,varDefault="", varWidth=260, varHeight=120)
{
	SetTimer, 输入窗口将光标定位到输入框最后,100
	return MyInput(vartitle, varPrompt, varDefault, varWidth, varHeight)
	return
输入窗口将光标定位到输入框最后:
	ifwinexist %vartitle%,%varPrompt%
	{
		winactivate
		send {end}
		SetTimer, 输入窗口将光标定位到输入框最后, Off
	}
	return
}

;; 与MyInput不同之处在于, 输入窗口会置顶并自动透明
MyInputBox(vartitle,varPrompt,varDefault="",varXPos=0, varYPos=0, varWidth=260, varHeight=120)
{
	var_user := ""
	SetTimer, 设置MyInputBox窗口透明度,100
	if varWidth <=0 or varHeight <= 0
	{
		inputbox,var_user,%vartitle%,%varPrompt%,,,, , , , ,%varDefault%
	}
	else
	{
		inputbox,var_user,%vartitle%,%varPrompt%,,%varWidth%,%varHeight%, , , , ,%varDefault%
	}
	return var_user

设置MyInputBox窗口透明度:
	ifwinexist %vartitle%,%varPrompt%
	{
		if not(varXPos=0 or varYPos=0)
		   winmove %varXPos%,%varYPos%
		winset,AlwaysOnTop, ON
		ifwinactive %vartitle%,%varPrompt%
			WinSet, Transparent,250
		else
			WinSet, Transparent,100
	}
	else
	SetTimer, 设置MyInputBox窗口透明度, Off
	return
}

;;默认更宽的窗口,方便于设置InputBox窗口的宽度和高度
MyInputBox2(vartitle,varPrompt,varDefault="", varWidth=400, varHeight=160)
{
	return MyInputBox(vartitle,varPrompt,varDefault,0,0,varWidth,varHeight)
}





;; 程序调试用， 用MsgBox呈现Text_的内容, 并显示当前运行的文件、函数以及所在行
; @ Text_ 			要显示的内容
; @ DebugGroup_	当全局参数g_group未初始化时, 将从{var.ini}[debug]<DebugGroup_>中读取值,
; @ g_group 		当g_group=1时, 显示MsgBox, 引入该参数的目的是少读取var.ini文件

DebugBox(Text_, DebugGroup_, byref g_group)
{
	if not g_group
	{
;		msgbox DebugBox() :: g_group 未初始化, 从var.ini 读取 %DebugGroup_%
		IniRead, ShowMsgBox, var.ini, Debug, %DebugGroup_%, false
		if (ShowMsgBox)
			g_group:= 1
		else
			g_group := -1
	}

	if (g_group = 1)
	{
		MsgBox %Text_%
	}
	return
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 按钮消息相关的函数
;;------ 两个键Key1,key2同时按下时响应 Var_event事件 ----------
twokeys(key1,key2,var_event)
{
;	keyup = {%key1% up}
	sendevent,{blind}{%key1% down}
	keywait,%key2%,D L T0.3
	sendevent,%var_event%
	sendevent,{blind}{%key1% up}
}

; 检查某个键是否已经按下
is_key_down(KeyName_)
{
	GetKeyState, state, %KeyName_%
	if state = D
	{
		return True
	}
	return false
}

;; 按住Key_键, 持续Send由SendText_指定的内容,  MilSecond_ 指定循环间隔时间(毫秒)
loop_send_while_keydown(Key_, SendText_, MilSecond_=100)
{
	Loop
	{
		Send %SendText_%
		Sleep %MilSecond_%
		if not is_key_down(Key_)
		{
			Return
		}
	}
	return
}

;; 按住Key_键, 持续调用函数 FunctionName_( Param_ ), MilSecond_ 指定循环间隔时间(毫秒)
loop_func_while_keydown( Key_, FunctionName_, Param_="", MilSecond_=100 )
{
	msgbox loop_func_while_keydown(Key_, FunctionName_, Param_="", MilSecond_=100)

	Loop
	{
		%FunctionName_%(Param_)		; 函数调用
		Sleep %MilSecond_%
		if not is_key_down(Key_)
		{
			Return
		}
	}
	Return
}


; 在选中的文本前后分别加上字符串FirstString和 LastString
block_selected_text(FirstString, LastString)
{
	Clipboard =
	sleep 100
	send ^x
	ClipWait 2
;	if  (Clipboard = "") return
	var_temp = %FirstString%%Clipboard%%LastString%
	SendByClip(var_temp)
;	SendInput {Raw}%var_temp%

;	示例说明
;	block_selected_text("`"", "`"") 将选中的文本用引号括起来
;	block_selected_text("(", ")")    将选中的文本用()括起来
}

block_clipboard_text(FirstString, LastString)
{
	var_temp = %FirstString%%Clipboard%%LastString%
	SendByClip(var_temp)
;	SendInput {Raw}%var_temp%

;	示例说明
;	block_selected_text("`"", "`"") 将选中的文本用引号括起来
;	block_selected_text("(", ")")    将选中的文本用()括起来
}

;;---将RGB色彩从 #abcdef 转换成 (171, 205, 239)------------------------------
SplitRGB(colorstr, byref var_red, byref var_green, byref var_blue)
{
	StringLeft, var_head, colorstr, 2
	if (var_head == "0x")
	{
		SetFormat, IntegerFast, hex
		StringMid, var_red, colorstr, 3 , 2
		StringMid, var_green, colorstr, 5 ,2
		StringMid, var_blue, colorstr, 7 , 2
		var_red 	= 0x%var_red%
		var_green 	= 0x%var_green%
		var_blue 	= 0x%var_blue%
		SetFormat, IntegerFast, d
		var_red 	+= 0
		var_green 	+= 0
		var_blue 	+= 0
		return true
	}
	return false
}

; 切换输入法的方法，dwLayout 指定键盘布局， 举例：switchime("E0210804")切换到QQ五笔， switchime("E0200804") 切换到搜狐五笔
; HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\键盘布局（如：E0200804）\Ime File=SOGOUWB.IME
SwitchIME_index(dwLayout)
{
    DllCall("SendMessage", UInt, WinActive("A"), UInt, 80, UInt, 1, UInt, DllCall("LoadKeyboardLayout", Str, dwLayout, UInt, 1))
}


SwitchIME(name)
{
	Loop, HKLM, SYSTEM\CurrentControlSet\Control\Keyboard Layouts,1,1
	{
		IfEqual,A_LoopRegName,Layout Text
		{
			RegRead,Value
			IfInString,value,%name%
			{
				RegExMatch(A_LoopRegSubKey,"[^\\]+$",dwLayout)
				HKL:=DllCall("LoadKeyboardLayout", Str, dwLayout, UInt, 1)
				ControlGetFocus,ctl,A
				SendMessage,0x50,0,HKL,%ctl%,A
				Break
			}
		}
	}
}


/** @brief	为Edit控件设置新文本, 并且选中指定文本
 * @param[in]	NewText  为Edit控件新设置的文本
 * @param[in]	SelectText  希望被选中的文本
 * @param[in]	bR  从NewText的右边开始查找SelectText
 * @param[in]	EditControl  Edit控件的名称
 * @param[in]	WinTitle  窗口标题
 * @param[in]	WinText  窗口包含的文本
 */
SetEditTextAndSelect( NewText, SelectText, bR, EditControl, WinTitle = "A", WinText = "" )
{
	ControlSetText , %EditControl%, %NewText%, %WinTitle%, %WinText%
	ControlFocus , %EditControl%, %WinTitle%, %WinText%
	if selectText =
	{
		return
	}
	ifNotInString NewText, %SelectText%
	{
		return
	}

	var_oldclip := clipboard
	clipboard =
	startPos := 0
	lenNew := strlen( NewText )
	lenSelect := strlen( SelectText )
	count := lenNew - lenSelect
	if bR
	{
		loop %count%
		{
			IfWinNotExist %WinTitle%, %WinText%
				break

			send {end}
			if startPos > 0
			{
				send {left %startPos%}
			}
			loop %lenSelect%
			{
				send {shift down}{left}{shift up}
				send ^c
				if ( clipboard == SelectText )
				{
					clipboard := var_oldclip
					return
				}
			}
			startPos++
		}
	}
	else
	{
		loop %count%
		{
			IfWinNotExist %WinTitle%, %WinText%
				break

			send {home}
			if startPos > 0
			{
				send {right %startPos%}
			}
			loop %lenSelect%
			{
				send {shift down}{right}{shift up}
				send ^c
				if ( clipboard == SelectText )
				{
					clipboard := var_oldclip
					return
				}
			}
			startPos++
		}
	}

	clipboard := var_oldclip
}

ComboBox_Count( var_ComboBox )
{
	SendMessage, 0x0146, 0, 0, %var_ComboBox%
	nRowCount:=ErrorLevel
	return nRowCount
}

;;---为ComboBox选择下一个选项，超过选项总数时循环，成功返回true--------------
ComboBox_choose_next( var_ComboBox, byref var_curRow )
{
	SendMessage, 0x0146, 0, 0, %var_ComboBox%
	nRowCount:=ErrorLevel

	nNextRow := var_curRow + 1
	if (nNextRow > nRowCount )
		nNextRow = 1

	;; 选择下拉列表的第 nNextRow 行
	if ( nNextRow != var_curRow )
	{
		var_curRow := nNextRow
		Control, Choose, %nNextRow%, %var_ComboBox%
		return true
	}
	return false
}

;;---是否连续按了同一个键----------------------------------------------------
is_same_key( var_time = 250 )
{
	If ( A_ThisHotkey == A_PriorHotkey && A_TimeSincePriorHotkey < var_time )
		return true
	return false
}


MouseGetRelaPos( byref rx, byref ry )
{
	CoordMode, Mouse, Relative
	MouseGetPos rx, ry
	CoordMode, Mouse, Screen
}

GetTerminatingCharacters()
{
	;; 不能作为结束符的字符 -_
	var_temp = `n `"+*`%^/\=`,:?!`'()<&|>[]``{}`;　，。；・‘“”’《》【】｛｝、：！
	return var_temp
}

;;---判断一个变量是否非空的数字----------------------------------------------
is_digit( var )
{
	if var =
		return false
	if a is not digit
		return false
	return true
}
;; 位与运算，返回值为 var1_ & var2_
bit_and( var1_, var2_ )
{
	Transform var_out, bitand, var1_, var2_
	return var_out
}

;; 位或运算，返回值为 var1_ | var2_
bit_or( var1_, var2_ )
{
	Transform var_out, bitor, var1_, var2_
	return var_out
}

;; 异或运算
bit_xor( var1_, var2_ )
{
	Transform var_out, bitxor, var1_, var2_
	return var_out
}

;; 位非运算，返回值为 !var_
bit_not( var_ )
{
	Transform var_out, BitNot, var_
	return var_out
}

;; 左移
bit_left( var1_, var2_ )
{
	Transform var_out, BitShiftLeft, var1_, var2_
	return var_out
}

;; 右移
bit_right( var1_, var2_ )
{
	Transform var_out, BitShiftRight, var1_, var2_
	return var_out
}


;;---判断一个窗口是否全屏状态------------------------------------------------
is_full_screen( var_ahkid )
{
	ifwinexist ahk_id %var_ahkid%
	{
		WinGet, Style, Style, ahk_id %var_ahkid%
		if !(Style & 0xC40000)
		{
			return true
		}
	}
	return false
}

;;---得到指定标题的窗口ahkid-------------------------------------------------
get_ahkid( WinTitle="" )
{
	if WinTitle =
		WinTitle = A
	WinGet, OutputVar , id, %WinTitle%
	return OutputVar
}

;;---获取某个文档关联程序的完整路径------------------------------------------
get_open_exe( var_document )
{
	VarSetCapacity( exefile, 256 )
	DllCall("Shell32\FindExecutableA", str, var_document, str, "", str, exefile )
	return exefile
}

;; 得到指定路径的扩展名，如果是文件夹则返回$Dir$, 如果文件不存在，则返回false, 没有扩展名则返回$NoExt$
get_file_ext( var_file )
{
	;; 如果var_file包含了分号，如： "C:\Program Files\Common Files\Microsoft Shared\Virtualization Handler\CVH.EXE" "Microsoft Excel 2010 (Beta) 2014006208040000"
	;; 则取第一个分号内的字符串 C:\Program Files\Common Files\Microsoft Shared\Virtualization Handler\CVH.EXE
	var_quotation = `"
	if ( instr( var_file, var_quotation ) == 1 )
	{
		StringMid var_temp, var_file, 2
		var_pos := instr( var_temp, var_quotation )
		if var_pos > 0
		{
			StringLeft var_file, var_temp, var_pos - 1
		}
	}
	;; 从var_file中提取扩展名
	StringLeft var_temp, var_file, 4
	if var_temp = www.
		return "$Web$"
	if var_temp = http
		return "$Web$"
	AttributeString := FileExist( var_file )
	if AttributeString =
		return
	IfInString AttributeString, D
		return "$Dir$"
	SplitPath, var_file , , , OutExtension
	if OutExtension =
		OutExtension = $NoExt$
	return OutExtension
}

is_folder(Path)
{
	FileGetAttrib, Attrib, %Path%   ;把 Path 指向的文件或文件夹的属性赋值给 Attrib
	IfInString, Attrib, D            ;如果在 Attrib 里有 D ,就表示这个路径代表的是文件夹，否则就是文件
	{
		Return 1
	}
	Else
	{
		Return 0
	}
}


;; 更换本程序图标
;; bForce 指定如果是编译成了EXE文件，是否要更换图标
;; Flag_  指定是否要锁定图标，即当Suspend时不将图标更换到默认的S形图标
change_icon( var_icofile = "", bForce = false, Flag_="" )
{
	;; 如果执行的脚本是EXE文件，只有bForce = True 时才更换图标
	if a_IsCompiled
	{
		if not bForce
		{
			Return                                  ;; 对于EXE文件，在没有强制换图标时退出
		}
	}
	;; 如果图标文件为空, 则默认采用与脚本文件所在目录的, 与脚本有相同名称的ICO文件
	if var_icofile =
	{
		SplitPath, a_ScriptFullPath ,  , OutDir, , OutNameNoExt
		var_icofile = %OutDir%\%OutNameNoExt%.ico
		; msgbox var_icofile = %var_icofile%
	}
	else
	{
		SplitPath, var_icofile, OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive
		if OutExtension <> ico
		{
			Return                                  ;; 给定的图标不是ICO文件, 则退出
		}
		if Outdir =
		{
			SplitPath, a_ScriptFullPath ,  , OutDir
			var_icofile = %OutDir%\%OutNameNoExt%.ico
		}
	}
	;; 如果ico图标文件存在，则使用之
	IfExist %var_icofile%
	{
		Menu TRAY, Icon,  %var_icofile%, , %Flag_%
	}
}


;; 调用运行一个脚本，本脚本文件a_IsComplied时，被调用的脚本优先调用编译后的EXE文件
;; 运行成功则返回PID， 否则返回0
run_ahk( Target, Param="", WorkingDir="", MaxMinHide="", bWait=false )
{
	var_file = `"%Target%`"            		   ;; 将实际运行的文件名
	;; 先目标文件是否为AHK脚本文件
	SplitPath, Target , OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive
	if OutExtension in ahk,aik
	{
		;; 如果目标文件是AHK脚本文件，且当前脚本文件a_IsComplied，则优先寻找编译好的EXE文件
		if A_IsCompiled
		{
			var_temp = %OutDir%\%OutNameNoExt%.exe
			IfExist %var_temp%
				var_file := var_temp
			Else if a_AhkPath <>
			{
				var_file = %A_AhkPath% %var_file%
			}
			Else
				return 0                  ;; 不存在 AutoHotkey.exe，无法执行AHK脚本文件
		}
		;;  如果 当前脚本文件a_IsComplied = false, 则直接使用AutoHotkey文件执行Target
		else
		{
			var_file = %A_AhkPath% %var_file%
		}
	}
	;; 为MaxMinHide参数增加 UseErrorLevel 属性
	if MaxMinHide =
		MaxMinHide = UseErrorLevel
	else IfNotInString MaxMinHide, UseErrorLevel
		MaxMinHide = UseErrorLevel|%UseErrorLevel%

	if bWait
		runwait %var_file% %Param%, %WorkingDir%, %MaxMinHide% 
	else
		run %var_file% %Param%, %WorkingDir%, %MaxMinHide%, OutputVarPID

	if ErrorLevel
		return 0

	return OutputVarPID
}

runwait_ahk( Target, Param="", WorkingDir="", MaxMinHide="" )
{
	var_file = `"%Target%`"            		   ;; 将实际运行的文件名
	;; 先目标文件是否为AHK脚本文件
	SplitPath, Target , OutFileName, OutDir, OutExtension, OutNameNoExt, OutDrive
	if OutExtension in ahk,aik
	{
		;; 如果目标文件是AHK脚本文件，且当前脚本文件a_IsComplied，则优先寻找编译好的EXE文件
		if A_IsCompiled
		{
			var_temp = %OutDir%\%OutNameNoExt%.exe
			IfExist %var_temp%
				var_file := var_temp
			Else if a_AhkPath <>
			{
				var_file = %A_AhkPath% %var_file%
			}
			Else
				return 0                  ;; 不存在 AutoHotkey.exe，无法执行AHK脚本文件
		}
		;;  如果 当前脚本文件a_IsComplied = false, 则直接使用AutoHotkey文件执行Target
		else
		{
			var_file = %A_AhkPath% %var_file%
		}
	}
	;; 为MaxMinHide参数增加 UseErrorLevel 属性
	if MaxMinHide =
		MaxMinHide = UseErrorLevel
	else IfNotInString MaxMinHide, UseErrorLevel
		MaxMinHide = UseErrorLevel|%UseErrorLevel%

	runwait %var_file% %Param%, %WorkingDir%, %MaxMinHide%, OutputVarPID

	if ErrorLevel
		return 0

	return OutputVarPID
}

;; Send 到鼠标下的控件
SendToUnderMouse( keys_ )
{
	MouseGetPos,  ,  , UMWID, UMC
	ControlSend %UMC%, %keys_%, ahk_id %UMWID%
}

;; 给定的坐标是否在当前活动窗口内
IsPosInAWin( x_, y_ )
{
	WinGetActiveStats, Title, Width, Height, X, Y 
	if ( x_ > X && x_ < ( X + Width ) && y_ > Y && y_ < ( Y + Height ) )
		return true
	msgbox ( %x_%`, %y_%) [ %x%, %y%, %width%, %height% ]
	return false
}

;; 鼠标是否在当前活动窗口内
IsMouseInAWin( )
{
	CoordMode, Mouse, Screen 
	MouseGetPos,  x, y
	return IsPosInAWin( x, y )
}

;; 得到桌面的高度（不包括任务栏的高度）
GetDeskHeight()
{
	WinGetPos , , Y, , taskH, ahk_class Shell_TrayWnd		;; 获得任务栏的高
	deskH := A_ScreenHeight - taskH     ;; 除去任务栏后的桌面高度
	return deskH
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Function: 屏蔽/开启键盘输入
;   The following 2 functions were posted by AHK user Andreone and can be found
;       at http://www.autohotkey.com/forum/topic22761.html
;
;   BlockKeyboardInputs(state="On") disables all keyboard key presses,
;   but Control, Shift, Alt (thus a hotkey based on these keys can be used to unblock the keyboard)
;
; Param
;   state [in]: On or Off

BlockKeyboardInputs(state = "On")
{
   static keys
   keys=Space,Enter,Tab,Esc,BackSpace,Del,Ins,Home,End,PgDn,PgUp,Up,Down,Left,Right,CtrlBreak,ScrollLock,PrintScreen,CapsLock
,Pause,AppsKey,LWin,LWin,NumLock,Numpad0,Numpad1,Numpad2,Numpad3,Numpad4,Numpad5,Numpad6,Numpad7,Numpad8,Numpad9,NumpadDot
,NumpadDiv,NumpadMult,NumpadAdd,NumpadSub,NumpadEnter,NumpadIns,NumpadEnd,NumpadDown,NumpadPgDn,NumpadLeft,NumpadClear
,NumpadRight,NumpadHome,NumpadUp,NumpadPgUp,NumpadDel,Media_Next,Media_Play_Pause,Media_Prev,Media_Stop,Volume_Down,Volume_Up
,Volume_Mute,Browser_Back,Browser_Favorites,Browser_Home,Browser_Refresh,Browser_Search,Browser_Stop,Launch_App1,Launch_App2
,Launch_Mail,Launch_Media,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,F11,F12,F13,F14,F15,F16,F17,F18,F19,F20,F21,F22
,1,2,3,4,5,6,7,8,9,0,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
,2,&,é,",',(,-,è,_,?,à,),=,$,￡,ù,*,~,#,{,[,|,``,\,^,@,],},;,:,!,?,.,/,§,<,>,vkBC
   Loop,Parse,keys, `,
      Hotkey, *%A_LoopField%, KeyboardDummyLabel, %state% UseErrorLevel
   Return
; hotkeys need a label, so give them one that do nothing
KeyboardDummyLabel:
Return
}

; ******************************************************************************
; Function: 屏蔽/开启鼠标输入
;    BlockMouseClicks(state="On") disables all mouse clicks
;
; Param
;   state [in]: On or Off
;
BlockMouseClicks(state = "On")
{
   static keys="RButton,LButton,MButton,WheelUp,WheelDown"
   Loop,Parse,keys, `,
      Hotkey, *%A_LoopField%, MouseDummyLabel, %state% UseErrorLevel
   Return
; hotkeys need a label, so give them one that do nothing
MouseDummyLabel:
Return
}


;; 将字符串_str转义成NeedleRegEx, 供RegExMatch() 搜索匹配, 返回转义后的字符串
StrToNeedleRegEx( _str )
{
	strRet := _str
	if _str contains \,.,*,?,+,[,{,|,(,),},],^,$
	{
		StringReplace strRet, strRet, \, \\, all
		StringReplace strRet, strRet, ., \., all
		StringReplace strRet, strRet, *, \*, all
		StringReplace strRet, strRet, ?, \?, all
		StringReplace strRet, strRet, +, \+, all
		StringReplace strRet, strRet, [, \[, all
		StringReplace strRet, strRet, ], \], all
		StringReplace strRet, strRet, {, \{, all
		StringReplace strRet, strRet, }, \}, all
		StringReplace strRet, strRet, |, \|, all
		StringReplace strRet, strRet, (, \(, all
		StringReplace strRet, strRet, ), \), all
		StringReplace strRet, strRet, ^, \^, all
		StringReplace strRet, strRet, $, \$, all
	}
	return strRet
}


;; 将多行文本转换成单行字符串，规则如下
;; 用|替换回车`n, &#124`;替换|
EncodeToString( text_ )
{
	str := text_
	StringReplace, str, str , `r, , All		;; 删除`r换行
	StringReplace, str, str , |, &#124`;, All	;; |  --> &#124`;
	StringReplace, str, str , `n, |, All		;; `n --> |
	Return str
}

DecodeToText( str_ )
{
	var_text := str_
	StringReplace, var_text, var_text  , |, `n, All		;; |   --> `n
	var_text := RegExReplace( var_text, "\@#124;", "|" )
	Return var_text
}

RunOrActivate(Target, WinTitle = "")
{
	; Get the filename without a path
	SplitPath, Target, TargetNameOnly
	Process, Exist, %TargetNameOnly%
	If ErrorLevel > 0
		PID = %ErrorLevel%
	Else
		Run, %Target%, , , PID
	If WinTitle <>
	{
		SetTitleMatchMode, 2
		WinWait, %WinTitle%, , 3
		WinActivate, %WinTitle%
	}
	Else
	{
		WinWait, ahk_pid %PID%, , 3
		WinActivate, ahk_pid %PID%
	}
}

IsControlVisible( Control_, WinTitle_, WinText_ )
{
	ControlGet, OutputVar, Visible, ,%Control_%, %WinTitle_%, %WinText_%
	return OutputVar
}

IsFormVisible( hwnd_ )
{
	ControlGet, OutputVar, Visible, , , ahk_id %hwnd_%
	return OutputVar
}

; Function to run a program or activate an already running instance 
RunOrActivateProgram(Program, WorkingDir="", WindowSize=""){ 
    SplitPath Program, ExeFile 
    Process, Exist, %ExeFile% 
    PID = %ErrorLevel% 
    if (PID = 0) { 
    Run, %Program%, %WorkingDir%, %WindowSize% 
    }else{ 
    WinActivate, ahk_pid %PID% 
    } 
} 

;; 从参数列表中查找指定参数值
;; 参数文本如下：
;; title:我的小字典
;; section:分节
GetValueFromParams( paramtext_, key_, seperator_=":", lineBreak_="`n" )
{
	if paramtext_ =
		return 

	if key_ = 
		return

	if lineBreak_ = `n
	{
		StringReplace paramtext_, paramtext_, `r`n, `n, all
		StringReplace paramtext_, paramtext_, `r, `n, all
		StringReplace paramtext_, paramtext_, `n`n, `n, all
	}

	loop , parse, paramtext_, %lineBreak_%
	{
		var_temp := a_loopfield
		if var_temp =
			continue


		var_needle = ^\s*%key_%\s*%seperator_%
		if RegExMatch(var_temp, var_needle ) > 0			
		{
			var_needle = ^\s*%key_%\s*%seperator_%
			return RegExReplace( var_temp, var_needle )
		}
	}
}
